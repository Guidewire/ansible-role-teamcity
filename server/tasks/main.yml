- name: Create teamcity group
  group: name="{{ teamcity_server_group }}"
  when: teamcity_server_user != 'root'

- name: Create teamcity user
  user:
    name: "{{ teamcity_server_user }}"
    group: "{{ teamcity_server_group }}"
    shell: /sbin/nologin
    home: "{{ teamcity_server_install_dir }}"
    createhome: no
  when: teamcity_server_user != 'root'

- name: create {{ teamcity_server_install_dir }}
  file: dest="{{ teamcity_server_install_dir }}"
        state=directory
        recurse=yes
        owner="{{ teamcity_server_user }}"
        group="{{ teamcity_server_group }}"

- name: get releases info
  uri:
    url: https://data.services.jetbrains.com//products/releases?code=TC&latest=true&type=release&build=&_={{ ansible_date_time.epoch }}001
    return_content: yes
  register: releases

- name: show latest version
  debug: msg=" Latest version is {{ releases.json.TC.0.version }}, {{ releases.json.TC.0.downloads.linux.size/1024/1024 }} MB at {{ releases.json.TC.0.downloads.linux.link }}"

- block:
  # TODO: simlink! use {{ teamcity_server_unarchive_dir }} but also have to save configs!
  - name: get server
    unarchive:
      src: "{{ releases.json.TC.0.downloads.linux.link }}"
      dest: "{{ teamcity_server_install_dir }}"
      owner: "{{ teamcity_server_user }}"
      group: "{{ teamcity_server_group }}"
      validate_certs: "{{ teamcity_server_validate_certs }}"
      remote_src: yes
      extra_opts:
        - --strip-components=1
      creates: "{{ teamcity_server_install_dir }}/bin/"
  rescue:
  - name: get checksum
    uri: url="{{ releases.json.TC.0.downloads.linux.checksumLink }}" return_content=yes validate_certs=no
    register: checksum

  - name: download server archive
    shell: wget -c "{{ releases.json.TC.0.downloads.linux.link }}" chdir={{ teamcity_server_archive_download_dir }}

  - name: extract server archive
    unarchive:
      src: "{{ teamcity_server_archive_download_dir }}/{{ releases.json.TC.0.downloads.linux.link|basename }}"
      dest: "{{ teamcity_server_install_dir }}"
      owner: "{{ teamcity_server_user }}"
      remote_src: yes
      extra_opts:
        - --strip-components=1

- name: put defaults
  template:
    src: etc/default/teamcity.j2
    dest: /etc/default/teamcity
  notify: "{{ 'systemd' if ansible_service_mgr == 'systemd' else 'initd' }} restart teamcity"
  when: ansible_service_mgr in ['upstart', 'sysvinit']

- name: put init.d script
  template:
    src: etc/init.d/teamcity.j2
    dest: /etc/init.d/teamcity
    mode: "0755"
  when: ansible_service_mgr in ['upstart', 'sysvinit']
  notify: initd restart teamcity

- name: put systemd service
  template:
    src: etc/systemd/system/teamcity.service.j2
    dest: /etc/systemd/system/teamcity.service
  when: ansible_service_mgr == 'systemd'
  notify: systemd restart teamcity
  register: service_config
  
- name: reload service config
  shell: systemctl daemon-reload
  when: service_config|changed

- name: start and enable teamcity
  service: name=teamcity state=started enabled=yes

- name: flush handlers
  meta: flush_handlers
